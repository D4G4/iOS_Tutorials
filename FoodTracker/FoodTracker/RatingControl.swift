//
//  RatingControl.swift
//  FoodTracker
//
//  Created by Daksh Gargas on 21/12/18.
//  Copyright © 2018 Daksh Gargs. All rights reserved.
//

import UIKit

@IBDesignable class RatingControl: UIStackView {

    //MARK: Properties
    private var ratingButtons = [UIButton] ()
    var rating = 0 {
        didSet {
            updateButtonSelectionStates()
        }
    }

    @IBInspectable var startSize: CGSize = CGSize(width: 44.0, height: 44.0) {
        didSet {
            print("didSet startSize")
            setupButtons()
        }
    }
    @IBInspectable var startCount: Int = 5 {
        didSet {
            print("didSet startCount")
            setupButtons()
        }
    }

    //MARK: Initialization
    ///Swift handles initializers differently than other methods. If you don't provide any initializers, Swift classes AUTOMATICALLY INHERIT all of their super class's designated initializers.
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupButtons()
    }

    ///Why was the XCode forcing me to override this? : Check point 8 (3rd tutorial) if you can't recall the answer
    required init(coder: NSCoder) {
        super.init(coder: coder)
        setupButtons()
    }

    //MARK: Private Methods

    private func setupButtons() {
        ///Ripping out and replacing all of the buttons is not necessarily the best idea from a performance standpoint. However, the didSet observers should only be called by Interface Builder at design time. When the app is running, the `setupButtons()` method is only called once, when the control is first loaded from the storyboard. Therefore, there’s no need to create a more-complex solution to update the existing buttons in place.
        //remove any existing buttons
        for button in ratingButtons {
            removeArrangedSubview(button)
            button.removeFromSuperview()
        }
        ratingButtons.removeAll()

        // Load button images
        //let bundle = Bundle(for: type(of: RatingControl))
        let bundle = Bundle(for: type(of: self))
        let filledStar = UIImage(named: "filledStar", in: bundle, compatibleWith: self.traitCollection)
        let emptyStar = UIImage(named: "emptyStar", in: bundle, compatibleWith: self.traitCollection)
        let highlightStar = UIImage(named: "highlightedStar", in: bundle, compatibleWith: self.traitCollection)

        for index in 0..<startCount {

            let button = UIButton()
            //button.backgroundColor = UIColor.red

            //set button images
            button.setImage(emptyStar, for: .normal)
            button.setImage(filledStar, for: .selected)
            button.setImage(highlightStar, for: .highlighted)
            button.setImage(highlightStar, for: [.selected, .highlighted])

            //The above line is not strictly necessary. When you add a view to a stack view, the stack view automaitcally sets the view's translatesAutoresizingMaskIntoConstraints property to `false`
            button.translatesAutoresizingMaskIntoConstraints = false //Disables autogenerated constraints
            button.heightAnchor.constraint(equalToConstant: startSize.height).isActive = true
            button.widthAnchor.constraint(equalToConstant: startSize.width).isActive = true

            // Set accessibility label
            button.accessibilityLabel = "Set \(index + 1) star rating"

            button.addTarget(self, action: #selector(RatingControl.ratingButtonTapped(button: forEvent:)), for: .touchUpInside)

            // Add the buton to the stack
            addArrangedSubview(button)

            //Add the new button to the rating button array
            ratingButtons.append(button)
        }
        updateButtonSelectionStates()
    }

    //MARK: Button Action
    @objc func ratingButtonTapped(button: UIButton, forEvent event: UIEvent) {
        print("Button Pressed 👍🏻")
        guard let index = ratingButtons.index(of: button) else {
            fatalError("The button \(button) is not in RatingButtons array")
        }

        let selectedRating = index + 1

        if selectedRating == rating {
            self.rating = 0
        } else {
            rating = selectedRating
        }
    }

    private func updateButtonSelectionStates() {
        for (index, button) in ratingButtons.enumerated() {
            // If the selected button is less than the rating, that button should be selected
            button.isSelected = index < rating

            let hintString: String?
            if rating == index + 1 {
                hintString = "Tap to reset the rating to zero."
            } else {
                hintString = nil
            }

            //Calculate the value String
            let valueString: String
            switch(rating) {
            case 0:
                valueString = "No rating set."
            case 1:
                valueString = "1 star set."
            default:
                valueString = "\(rating) stars set"
            }

            button.accessibilityHint = hintString
            button.accessibilityValue = valueString
        }
    }
    
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        print("Rotated")
        
        guard let prevTrait = previousTraitCollection else{
            return
        }
        if((self.traitCollection.verticalSizeClass != prevTrait.verticalSizeClass) || (self.traitCollection.horizontalSizeClass != prevTrait.horizontalSizeClass)) {
            print("Rotated idk where \n")
        }
    }
}
